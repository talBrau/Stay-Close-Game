//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Development/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerKeys"",
            ""id"": ""f8b989b9-5aeb-4ab4-85d1-50ae5c6fa436"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5f5ed2e5-edd6-45ea-853e-c238d0dea8ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e5e4a8ce-4753-4972-8007-5150539fee6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoToSpot"",
                    ""type"": ""Button"",
                    ""id"": ""41255861-ce20-451a-a007-d9950deda893"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MagnetToFriend"",
                    ""type"": ""Button"",
                    ""id"": ""68e2d82f-ac13-4c63-9aa7-b5f8740e6d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""126ea607-7b9e-4397-802a-287b03c8fb99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeSpotTarget"",
                    ""type"": ""Button"",
                    ""id"": ""ae290bc2-af8c-403c-88eb-b4292b6c6bf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetToCheckPoint"",
                    ""type"": ""Button"",
                    ""id"": ""eeab3ff9-8bd4-4ddf-b782-7594e22f063c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88dd5cd6-a512-4920-bc75-bb4350e2f3c1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1f1fc271-0977-4a26-ae22-906da2b5e142"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cfdf8646-4c65-454b-ad4a-dce6bf55e6cb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a874ffd5-81b0-4c67-b1a8-0779eea9950d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""bafe39bd-f56b-46b3-979c-6553d0a4f399"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a283ee15-217c-428e-b2d0-cb2e97b98fc9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65dfb239-6fe7-44e0-82a2-6f915e677e16"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86dff48f-85b4-44da-8f9f-33d9648fd04f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoToSpot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41ead855-60ec-432e-846c-269bdb1a93f0"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MagnetToFriend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b3bd1f1-2e61-40a5-bbd2-1bc9a6879d99"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57eda57a-6fe0-43d3-b100-c3881286af82"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSpotTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68720dc5-a0c5-4961-88c7-026cf8a3ab8b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetToCheckPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerKeys
        m_PlayerKeys = asset.FindActionMap("PlayerKeys", throwIfNotFound: true);
        m_PlayerKeys_Move = m_PlayerKeys.FindAction("Move", throwIfNotFound: true);
        m_PlayerKeys_Jump = m_PlayerKeys.FindAction("Jump", throwIfNotFound: true);
        m_PlayerKeys_GoToSpot = m_PlayerKeys.FindAction("GoToSpot", throwIfNotFound: true);
        m_PlayerKeys_MagnetToFriend = m_PlayerKeys.FindAction("MagnetToFriend", throwIfNotFound: true);
        m_PlayerKeys_Lift = m_PlayerKeys.FindAction("Lift", throwIfNotFound: true);
        m_PlayerKeys_ChangeSpotTarget = m_PlayerKeys.FindAction("ChangeSpotTarget", throwIfNotFound: true);
        m_PlayerKeys_ResetToCheckPoint = m_PlayerKeys.FindAction("ResetToCheckPoint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKeys
    private readonly InputActionMap m_PlayerKeys;
    private IPlayerKeysActions m_PlayerKeysActionsCallbackInterface;
    private readonly InputAction m_PlayerKeys_Move;
    private readonly InputAction m_PlayerKeys_Jump;
    private readonly InputAction m_PlayerKeys_GoToSpot;
    private readonly InputAction m_PlayerKeys_MagnetToFriend;
    private readonly InputAction m_PlayerKeys_Lift;
    private readonly InputAction m_PlayerKeys_ChangeSpotTarget;
    private readonly InputAction m_PlayerKeys_ResetToCheckPoint;
    public struct PlayerKeysActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerKeysActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerKeys_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerKeys_Jump;
        public InputAction @GoToSpot => m_Wrapper.m_PlayerKeys_GoToSpot;
        public InputAction @MagnetToFriend => m_Wrapper.m_PlayerKeys_MagnetToFriend;
        public InputAction @Lift => m_Wrapper.m_PlayerKeys_Lift;
        public InputAction @ChangeSpotTarget => m_Wrapper.m_PlayerKeys_ChangeSpotTarget;
        public InputAction @ResetToCheckPoint => m_Wrapper.m_PlayerKeys_ResetToCheckPoint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKeysActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerKeysActions instance)
        {
            if (m_Wrapper.m_PlayerKeysActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnJump;
                @GoToSpot.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnGoToSpot;
                @GoToSpot.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnGoToSpot;
                @GoToSpot.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnGoToSpot;
                @MagnetToFriend.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMagnetToFriend;
                @MagnetToFriend.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMagnetToFriend;
                @MagnetToFriend.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnMagnetToFriend;
                @Lift.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnLift;
                @Lift.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnLift;
                @Lift.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnLift;
                @ChangeSpotTarget.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnChangeSpotTarget;
                @ChangeSpotTarget.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnChangeSpotTarget;
                @ChangeSpotTarget.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnChangeSpotTarget;
                @ResetToCheckPoint.started -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnResetToCheckPoint;
                @ResetToCheckPoint.performed -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnResetToCheckPoint;
                @ResetToCheckPoint.canceled -= m_Wrapper.m_PlayerKeysActionsCallbackInterface.OnResetToCheckPoint;
            }
            m_Wrapper.m_PlayerKeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @GoToSpot.started += instance.OnGoToSpot;
                @GoToSpot.performed += instance.OnGoToSpot;
                @GoToSpot.canceled += instance.OnGoToSpot;
                @MagnetToFriend.started += instance.OnMagnetToFriend;
                @MagnetToFriend.performed += instance.OnMagnetToFriend;
                @MagnetToFriend.canceled += instance.OnMagnetToFriend;
                @Lift.started += instance.OnLift;
                @Lift.performed += instance.OnLift;
                @Lift.canceled += instance.OnLift;
                @ChangeSpotTarget.started += instance.OnChangeSpotTarget;
                @ChangeSpotTarget.performed += instance.OnChangeSpotTarget;
                @ChangeSpotTarget.canceled += instance.OnChangeSpotTarget;
                @ResetToCheckPoint.started += instance.OnResetToCheckPoint;
                @ResetToCheckPoint.performed += instance.OnResetToCheckPoint;
                @ResetToCheckPoint.canceled += instance.OnResetToCheckPoint;
            }
        }
    }
    public PlayerKeysActions @PlayerKeys => new PlayerKeysActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerKeysActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnGoToSpot(InputAction.CallbackContext context);
        void OnMagnetToFriend(InputAction.CallbackContext context);
        void OnLift(InputAction.CallbackContext context);
        void OnChangeSpotTarget(InputAction.CallbackContext context);
        void OnResetToCheckPoint(InputAction.CallbackContext context);
    }
}
